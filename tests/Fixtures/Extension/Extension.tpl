<?php
/**
 * Generated by Protobuf protoc plugin.
 */


namespace ProtobufTest\Protos\Extension;

/**
 * Protobuf extension : ProtobufTest\Protos\Extension
 */
class Extension implements \Protobuf\Extension
{

    /**
     * Extension field : habitat optional string = 200
     *
     * @var \Protobuf\Extension
     */
    protected static $habitat = null;

    /**
     * Extension field : verbose optional bool = 200
     *
     * @var \Protobuf\Extension
     */
    protected static $verbose = null;

    /**
     * Register all extensions
     *
     * @param \Protobuf\Extension\ExtensionRegistry
     */
    public static function registerAllExtensions(\Protobuf\Extension\ExtensionRegistry $registry)
    {
        $registry->add(\ProtobufTest\Protos\Extension\Dog::animal());
        $registry->add(self::habitat());
        $registry->add(self::verbose());
    }

    /**
     * Extension field : habitat
     *
     * @return \Protobuf\Extension
     */
    public static function habitat()
    {
        if (self::$habitat !== null) {
            return self::$habitat;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 9);

            $value = $reader->readString($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 1602);
            $writer->writeString($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 2;
            $size += $calculator->computeStringSize($value);

            return $size;
        };

        return self::$habitat = new \Protobuf\Extension\ExtensionField('\\ProtobufTest\\Protos\\Extension\\Animal', 'habitat', 200, $readCallback, $writeCallback, $sizeCallback);
    }

    /**
     * Extension field : verbose
     *
     * @return \Protobuf\Extension
     */
    public static function verbose()
    {
        if (self::$verbose !== null) {
            return self::$verbose;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 1600);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 2;
            $size += 1;

            return $size;
        };

        return self::$verbose = new \Protobuf\Extension\ExtensionField('\\ProtobufTest\\Protos\\Extension\\Command', 'verbose', 200, $readCallback, $writeCallback, $sizeCallback);
    }


}

